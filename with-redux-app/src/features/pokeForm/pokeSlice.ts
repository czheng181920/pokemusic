import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import type { AppState, AppThunk } from '../../store'

import { submitPokemon } from './pokeOpenAIAPI'

export interface PokeFormState {
  pokemonInput: string
  status: 'idle' | 'loading' | 'failed'
  openaiOutput: string
}

const initialState: PokeFormState = {
  pokemonInput: "",
  status: 'idle',
  openaiOutput: "",
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const pokeSubmit = createAsyncThunk(
  'pokeForm/submitPokemon',
  async (pokemonInput: string) => {
    const response = await submitPokemon(pokemonInput)
    // The value we return becomes the `fulfilled` action payload
    return response.result
  }
)

export const pokeSlice = createSlice({
  name: 'pokeForm',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setInput: (state, action: PayloadAction<string>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.pokemonInput = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(pokeSubmit.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(pokeSubmit.fulfilled, (state, action) => {
        state.status = 'idle'
        state.openaiOutput = action.payload
        state.pokemonInput = ''
      })
  },
})

export const { setInput } = pokeSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getPokeInput = (state: AppState) => state.pokeForm.pokemonInput
export const getOpenaiOutput = (state: AppState) => state.pokeForm.openaiOutput
export const getStatus = (state: AppState) => state.pokeForm.status



export default pokeSlice.reducer